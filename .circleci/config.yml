version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:
  hello-world: # Delete this job when you get started
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Say Hello
          command: |
            echo "Hello World"
  
#  build-frontend:
  build-compile-front-end:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build and compile front end
          command: |
            ls -ltr
            cd frontend
            npm i
            npm run build

            
 # build-backend           
  build-compile-back-end:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build and compile back end
          command: |
            cd backend
            ls -ltr
            npm i
            npm run build

# test-frontend:
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test frontend
          command: |
            ls -ltr
            cd frontend
            npm install jest
            npm run test
      
# test-backend:
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test backend
          command: |
            ls -ltr
            cd backend
            npm install jest
            npm run test

# scan-frontend:
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan frontend
          command: |
            ls -ltr    
            cd frontend
            npm audit --audit-level=critical


#  scan-backend:
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan backend
          command: |
            ls -ltr    
            cd backend
            npm audit fix --audit-level=critical --force
            npm update node-fetch --depth 3
            npm update terser-webpack-plugin --depth 2
            npm update elliptic --depth 5
            npm audit --audit-level=critical
      

#  deploy-infrastructure:
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Verify backend infrastructure
          command: |
            cd .circleci
            cd files
            pwd
            ls -la
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Verify frontend infrastructure
          command: |
            cd .circleci
            cd files
            pwd
            ls -la
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
   
# get instance ip    
  get_instance_ip:
    environment:
      ID: arns3
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get the instance ip address for backend 
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name, Values=udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory
      - run:
          name: store the backend ip address to memstash so that frontend can use it. 
          command: |
            chmod 777 bkmemstash.sh
            ./bkmemstash.sh

#  configure-infrastructure: 
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk add --no-cache --upgrade bash
      - run: apk --no-cache add curl
      - run:
          name: store the backend ip address to memstash so that frontend can use it. 
          command: |
            chmod 777 extract_ip_address.sh 
            ./extract_ip_address.sh

      - add_ssh_keys:
          fingerprints: ["4f:bf:cf:27:a7:f0:1a:d6:27:72:12:fa:45:86:c7:fa"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Install openssh
          command: |
             apk add openssh-client      
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/      
            pwd
            ls -la
            ansible-playbook -i ~/project/inventory  main.yml            

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  default:
    jobs:
      - hello-world
      - build-compile-front-end
      - build-compile-back-end
      - test-frontend:
          requires:
            - build-compile-front-end
            - build-compile-back-end
      - test-backend:
          requires:
            - build-compile-front-end
            - build-compile-back-end
      - scan-frontend:
          requires:
            - test-frontend
            - test-backend
      - scan-backend:
          requires:
            - test-frontend
            - test-backend
      - deploy-infrastructure:
          requires:
            - scan-frontend
            - scan-backend
      - get_instance_ip:
          requires:
            - deploy-infrastructure
      - configure_infrastructure:
          requires:
            - get_instance_ip                 


